---
title: "Getting Started"
author: "Piotr Pasza Storo≈ºenko & Pavel Demin"
subtitle: "Original content by Gordon Shotwell & Joe Cheng (Posit)"
title-slide-attributes: 
  data-background-color: black
  data-background-image:  images/toc-people-dark.svg
  data-background-size: contain
format:
  positconfslides-revealjs: 
    incremental: true
    chalkboard: true
    slide-number: c/t
    code-copy: true
    center-title-slide: false
    code-link: true
    highlight-style: a11y
    width: "1600"
    height: "900"
    filters:
      - positconfslides
---
```{python}
# | echo: false
import os

os.chdir("..")
from helpers import problem_tabs, include_shiny_folder

```

# Welcome to the Shiny Python Workshop

## Assumptions

- You have _some_ basic experience with Python
- You have _some_ basic experience with RShiny

## Goals of the workshop

1) Understand/refresh the mechanics of a Shiny app (what to do, not why you do it)
2) Learn how to build a PyShiny app
    1) Static Content
    2) Shiny Core and Shiny Express
    3) Reactivity
    4) Custom UI
    5) Shiny Modules
3) What python has that R doesn't
4) Tapyr

## Workshop workflow

- (Presentation, exercises)+
- All of the exercises and slides are running live on the [website](TODO)
- You can do them on the website or open the apps in the `apps/problem-sets` folder

## Testing your setup

- For the workshop, we advice using the page with all the exercises
- If you want to run the apps locally, setup your local environment and install the packages from `requirements.txt`

# Hello Shiny

## What's a Shiny app?
```{python}
# | echo: false
# | output: asis

include_shiny_folder(
    "apps/examples/0.0-penguins", components="viewer", viewer_height=700
)
```

## Key features of Shiny

- Easy to develop
- Extensible
- Efficient

## Why Shiny for Python?
- Shiny is designed to take you from prototype to production
- Easy enough to use for prototypes (especially `shiny.express`!)
- Efficient enough to handle complexity
- Everything you need to build production quality apps
    - You don't need to throw away your Shiny apps when moving from prototype to production ready
- Comparison with Dash / Streamlit / Jupyter Notebook / Reflex coming later on

## Anatomy of a Shiny App
To make a Shiny app work you need to do three things:

1) Add inputs and outputs to the UI
1) Create a rendering function
1) Refer to inputs 

## Inputs and outputs

```{.python code-line-numbers="3-6"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Rendering function

```{.python code-line-numbers="10-11"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Refer to inputs

```{.python code-line-numbers="12"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## UI functions

- UI functions are in the `ui` submodule
- Inputs start with `ui.input_*()` and take an id, and options
- Outputs start with `ui.output_*()` and usually just take an id
- Other functions like `ui.h1()` or `ui.p()` add static HTML to the app
- We'll get to layout functions in Session 3

## Server function

- Every Shiny app needs a `server` function
- The server function executes for each user session
- This function contains **rendering functions** which define how to turn inputs into outputs

## Rendering functions

```{.python}
def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"
```

- Functions are defined inside the main `server` function
- They need to be **decorated** with `@render.*`
- The function **name** should match the output id
- The return value is sent to the Shiny UI

## Decorators are just functions
```{.python}
    @render.plot(alt="A body mass plot of penguins")
    def mass_plot():
        df = sample_data(penguins.copy(), input.sample())
        df = df.loc[df["body_mass"] < input.mass()]
        return dist_plot(df)
```
- Decorators are functions which take other functions
- Shiny uses them to identify reactive functions
- They can take arguments


## Simple app example

```{.python code-line-numbers="5,10-12"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```


## Common problems

- An output doesn't render
- An output doesn't update when an input changes
- There's some weird error

## Connecting inputs to outputs

```{.python code-line-numbers="5"}
def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"
```

- Inputs are read by calling them like a function: `input.n()`, not `input.n`
- Referring to an input creates a reactive link between that input and the rendering function
- When the input changes, the rendering function will re-execute
- You can use multiple inputs in the same rendering function

## Recap

Most Shiny app development consists of variations of these three things:

1) Add UI elements
1) Add rendering functions
1) Connect inputs and outputs
1) ...
1) Refactoring code into modules and functions!