---
title: "Getting Started"
author: "Gordon Shotwell & Joe Cheng"
title-slide-attributes: 
  data-background-color: black
  data-background-image:  images/toc-people-dark.svg
  data-background-size: contain
format:
  positconfslides-revealjs: 
    incremental: true
    chalkboard: true
    slide-number: c/t
    code-copy: true
    center-title-slide: false
    code-link: true
    highlight-style: a11y
    width: "1600"
    height: "900"
    filters:
      - positconfslides
---
```{python}
# | echo: false
import os

os.chdir("..")
from helpers import problem_tabs, include_shiny_folder

```

# Housekeeping 

## Workshop info
::: {.nonincremental}
- WiFi:
  - Network: **Posit Conf 2023**
  - Password: **conf2023**
- There are gender-neutral bathrooms located among the Grand Suite Bathrooms.
- There are two meditation/prayer rooms: Grand Suite 2A and Grand Suite 2B. Open Sunday - Tuesday 7:30 a.m. - 7:00 p.m., Wednesday 8:00 a.m. - 6:00 p.m.
- The lactation room is located in Grand Suite 1. Open Sunday - Tuesday 7:30 a.m. - 7:00 p.m., Wednesday 8:00 a.m. - 6:00 p.m.
- Don't photograph people with red lanyards.
- The Code of Conduct and COVID policies can be found at https://posit.co/code-of-conduct/.
:::
## Outline for the day

| Start | End   | Title                         |
|-------|-------|-------------------------------|
| 9:00  | 10:30 | Getting started with Shiny    |
| 10:30 | 11:00 | Coffee break                  |
| 11:00 | 12:30 | Reactivity                    |
| 12:30 | 1:30  | Lunch                         |
| 1:30  | 3:00  | UI Customization              |
| 3:00  | 3:30  | Coffee break                  |
| 3:30  | 5:00  | Workflow best practices / Q&A |

```{=html}
<style>
#outline-for-the-day table {
  margin: 0;
  margin-top: 2em;
}
</style>
```

## Goals of Session 1

1) Understand the mechanics of a Shiny app (what to do, not why you do it)
2) Develop comfort with failure and debugging
3) You know where to go for help 

## How this session works

- This session is going to be exercise based
- We want to get into trouble
- Don't worry about understanding at this point, just get things working 
- Expect frustration


## Exercises
- All of the exercises and slides are running live on the [website](https://posit-dev.github.io/shiny-python-workshop-2023/)
- You can do them on the website or open the apps in the `apps/problem-sets` folder
- If you need help, put a red sticker on your laptop; when you're done, put up a green sticker

## Testing your setup

1) In a terminal, type `shiny create my-app`
2) Open `my-app/app.py`
3) Click the "Run app" button in the top right of VS Code ([screenshot](https://camo.githubusercontent.com/5d947e6dff7d74fd1cf221e79583105c42e4986ae673ce79733ce5edbfdcdda5/68747470733a2f2f7368696e792e7273747564696f2e636f6d2f70792f646f63732f6173736574732f7673636f64652e706e67))
4) If your local setup doesn't work, switch to Posit Workbench and try again


# Hello Shiny

## What's a Shiny app?
```{python}
# | echo: false
# | output: asis

include_shiny_folder(
    "apps/examples/0.0-penguins", components="viewer", viewer_height=700
)
```

## Key features of Shiny

- Easy to develop
- Extensible
- Efficient

## Why Shiny for Python?
- Shiny is designed to take you from prototype to production
- Easy enough to use for prototypes
- Efficient enough to handle complexity
- Everything you need to build production quality apps
- You don't need to throw away your Shiny apps

## Anatomy of a Shiny App
To make a Shiny app work you need to do three things:

1) Add inputs and outputs to the UI
1) Create a rendering function
1) Refer to inputs 

## Inputs and outputs

```{.python code-line-numbers="3-6"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Rendering function

```{.python code-line-numbers="10-12"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## Refer to inputs

```{.python code-line-numbers="13"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```

## UI functions

- UI functions are in the `ui` submodule
- Inputs start with `ui.input_*()` and take an id, and options
- Outputs start with `ui.output_*()` and usually just take an id
- Other functions like `ui.h1()` or `ui.p()` add static HTML to the app
- We'll get to layout functions in Session 3

## Your turn

Go to [exercises/1-hello-world](../exercises/1-hello-world.html) or run `apps/problem-sets/1-getting-started/1.0-hello-world` locally.

## Server function

- Every Shiny app needs a `server` function
- The server function executes for each user session
- This function contains **rendering functions** which define how to turn inputs into outputs

## Rendering functions

```{.python}
def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"
```

- Functions are defined inside the main `server` function
- They need to be **decorated** with `@output` and `@render.*` in that order
- The function **name** should match the output id
- The return value is sent to the Shiny UI

## Decorators are just functions
```{.python}
    @output
    @render.plot(alt="A body mass plot of penguins")
    def mass_plot():
        df = sample_data(penguins.copy(), input.sample())
        df = df.loc[df["body_mass"] < input.mass()]
        return dist_plot(df)
```
- Decorators are functions which take other functions
- Shiny uses them to identify reactive functions
- They can take arguments


## Simple app example

```{.python code-line-numbers="5,10-13"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)


def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)
```


## Common problems

- An output doesn't render
- An output doesn't update when an input changes
- There's some weird error

## Your turn

Go to [exercises/2-debug](../exercises/2-debug.html) or work through exercises 1.1-1.5 locally.

## Connecting inputs to outputs

```{.python code-line-numbers="5"}
def server(input: Inputs, output: Outputs, session: Session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"
```

- Inputs are read by calling them like a function: `input.n()`, not `input.n`
- The act of reading an input creates a reactive link between that input and the rendering function that's currently executing
- When the input changes, the rendering function will re-execute
- You can use multiple inputs in the same rendering function

## Your turn

Go to [exercises/3-add-filter](../exercises/3-add-filter.html) or work through exercises 1.6-1.9 locally.

## Recap

Most Shiny app development consists of variations of these three things:

1) Add UI elements
1) Add rendering functions
1) Connect inputs and outputs


## Your turn

Go to [exercises/4-add-plot](../exercises/4-add-plot.html) or work through exercise 1.10 locally.
